* README file for `po-utils'			allout -*- outline -*-

  PO utilities is meant to become a collection of tools for handling PO
  files.  Until there is a real Texinfo manual for it, the documentation is
  kept in this `README'.

.* PO mode

   File `po-mode.el' implements a set of Emacs editing functions for PO
   files.  The main documentation is currently part of the manual which
   comes in the `gettext' distribution.

.* xpot

. + Introduction

    This tool produces a PO template file on standard output, given a
    collection of source files.  It currently handles C, C++, Emacs LISP,
    and Python sources, as well as from pre-existing PO files.  It is meant
    to handle Awk, Perl or shell scripts, when everything will be ready
    for these.  And in fact, anything that could help internationalisation.

    To find out the language of a program, `xpot' looks for hints in the
    extension of the file name, or else, in the contents of the first two
    lines of the file, looking for `#!PATH/env PROGRAM', `#!PATH/PROGRAM',
    `-*-mode:MODE-*-' or `-*-MODE-*-' in the first two lines.

    `xpot' is itself written in C, Flex and Bison, and I would expect it to
    be rather fast even for big projects.  This is an alpha version.

. + Options

    One option to `xpot' allows for automatic extraction of all doc strings,
    which never need explicit marking in either Emacs LISP or Python,
    for this reason.  Translation of doc string might be useful in highly
    interactive programs, giving access to interpreter facilities.

. + Emacs LISP

    Mule files, when a character uses many bytes, may not be analysed
    correctly.

. + Python

    Adjacent strings (those only separated by whitespace or comments) are
    correctly concatenated at extraction time.  Strings are considered
    translatable if they are used within _(STRING) or gettext(STRING)
    constructs, other keywords may be added, of course.

    To palliate the lack of a pre-processor, strings which translation
    should be delayed may be marked as translatable by using one of the
    following special constructs, which are already valid Python:

       ''"text"        ''r"text"
       ""'text'        ""r'text'
       ''"""text"""    ''r"""text"""
       ""'''text'''    ""r'''text'''

    Doc strings, if their extraction has been selected, should be correctly
    found even after very complex initialisation of keyword parameters.
